// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components. 
$modules: () !default;
@mixin exports($name) {
  @if (index($modules, $name) == false) {
    $modules: append($modules, $name);
    @content;
  }
}

// RANGES
// We use these functions to define ranges for various things, like media queries. 
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// Borrowed from RenÃ© Meye's [pull request #61](https://github.com/zurb/ink/pull/61). 
@function number2word($n) {
  @if $n == 1 {
   @return one;
  } @else if $n == 2 {
    @return two;
  } @else if $n == 3 {
    @return three;
  } @else if $n == 4 {
    @return four;
  } @else if $n == 5 {
    @return five;
  } @else if $n == 6 {
    @return six;
  } @else if $n == 7 {
    @return seven;
  } @else if $n == 8 {
    @return eight;
  } @else if $n == 9 {
    @return nine;
  } @else if $n == 10 {
    @return ten;
  } @else if $n == 11 {
    @return eleven;
  } @else if $n == 12 {
    @return twelve;
  } @else if $n == 13 {
    @return thirteen;
  } @else if $n == 14 {
    @return fourteen;
  } @else if $n == 15 {
    @return fivetine;
  } @else if $n == 16 {
    @return sixteen;
  } @else if $n == 17 {
    @return seventeen;
  } @else if $n == 18 {
    @return eighteen;
  } @else if $n == 19 {
    @return nineteen;
  } @else if $n == 20 {
    @return twenty;
  } @else {
    @return many;
  }
}



//
// Color Functions
//

@function color2hex($color) {
// Easier way in > 3.3: @if function_exists(str-slice) { @return '#' + str-slice(ie-hex-str($color), 4, 9); }
  @if type-of($color) != "color" {
      @warn "color2hex(): `#{$color}` is not a color.";
      @return null;
    }
    $hexadecimal: '#' + number2hex(red($color)) + number2hex(green($color)) + number2hex(blue($color));
    @return unquote($hexadecimal);
}

@function number2hex($number) {
  $hex: '00' '01' '02' '03' '04' '05' '06' '07' '08' '09' '0a' '0b' '0c' '0d' '0e' '0f' '10' '11' '12' '13' '14' '15' '16' '17' '18' '19' '1a' '1b' '1c' '1d' '1e' '1f' '20' '21' '22' '23' '24' '25' '26' '27' '28' '29' '2a' '2b' '2c' '2d' '2e' '2f' '30' '31' '32' '33' '34' '35' '36' '37' '38' '39' '3a' '3b' '3c' '3d' '3e' '3f' '40' '41' '42' '43' '44' '45' '46' '47' '48' '49' '4a' '4b' '4c' '4d' '4e' '4f' '50' '51' '52' '53' '54' '55' '56' '57' '58' '59' '5a' '5b' '5c' '5d' '5e' '5f' '60' '61' '62' '63' '64' '65' '66' '67' '68' '69' '6a' '6b' '6c' '6d' '6e' '6f' '70' '71' '72' '73' '74' '75' '76' '77' '78' '79' '7a' '7b' '7c' '7d' '7e' '7f' '80' '81' '82' '83' '84' '85' '86' '87' '88' '89' '8a' '8b' '8c' '8d' '8e' '8f' '90' '91' '92' '93' '94' '95' '96' '97' '98' '99' '9a' '9b' '9c' '9d' '9e' '9f' 'a0' 'a1' 'a2' 'a3' 'a4' 'a5' 'a6' 'a7' 'a8' 'a9' 'aa' 'ab' 'ac' 'ad' 'ae' 'af' 'b0' 'b1' 'b2' 'b3' 'b4' 'b5' 'b6' 'b7' 'b8' 'b9' 'ba' 'bb' 'bc' 'bd' 'be' 'bf' 'c0' 'c1' 'c2' 'c3' 'c4' 'c5' 'c6' 'c7' 'c8' 'c9' 'ca' 'cb' 'cc' 'cd' 'ce' 'cf' 'd0' 'd1' 'd2' 'd3' 'd4' 'd5' 'd6' 'd7' 'd8' 'd9' 'da' 'db' 'dc' 'dd' 'de' 'df' 'e0' 'e1' 'e2' 'e3' 'e4' 'e5' 'e6' 'e7' 'e8' 'e9' 'ea' 'eb' 'ec' 'ed' 'ee' 'ef' 'f0' 'f1' 'f2' 'f3' 'f4' 'f5' 'f6' 'f7' 'f8' 'f9' 'fa' 'fb' 'fc' 'fd' 'fe' 'ff';
  @if type-of($number) != "number" {
      @warn "number2hex(): `#{$number}` is not a number.";
      @return null;
    }
  @if $number < 0 or $number > 255 {
      @warn "number2hex(): `#{$number}` is not between 0 and 255.";
      @return null;
    }
  @return nth($hex, $number + 1);
}



//
// Grid Functions
//


// @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
@function grid-calc-pct($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

@function grid-calc-px($colNumber, $totalColumns, $conWidth, $colGutter) {
  @return (($conWidth - ($totalColumns - 1) * $colGutter) / $totalColumns * $colNumber + ($colNumber - 1) * $colGutter);
}